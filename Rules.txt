- Явная типизация для переменных, обьектов, функций, методов.
    -Плохой пример: panels: []
    -Хороший пример: settingPanels: List[Label] <- Явное указание того что коллекция хранит в себе именно Label, а не любое иное значение.

- Понятные названия для переменных, обьектов, функций, методов.

- Стиль комментирования : PEP8

- Стиль написания кода:

    - camelCase – параметры, локальные переменные (userName).

    - PascalCase – классы, методы (GetUserData).

    - КОНСТАНТЫ ПИШУТСЯ КАПСОМ, ПРЯМ КАК ЭТОТ ТЕКСТ.

- Работа с конструктором: В конструктор запрещается передавать value - типы (str, int, bool, float) - для них использовать либо контейнер либо параметры методов/функций,
    в конструктор передаем только обьекты или контейнеры. Все обьекты передаются через конструктор за исключением обьектов создания контролов и контейнеров, 
    они как правило не содержат зависимостей и могут быть созданны независимо он конструктора. 

    ###Хороший пример можете посмотреть в папке Buttons/AddedRowButton или Buttons/DeleteRowButton.
        - Использование наследника для Button группы 20 сторока.
        - Использование контейнеров 25/26 сторока.

- Обьекты не имеющие зависимостей создаются исключительно в конструкторе.
    - Пример можно так - же посмотреть в Buttons/AddedRowButton или Buttons/DeleteRowButton на 25/26 строке.

- Работу с событиями контролов можете посмотреть в Buttons/AddedRowButton/AddData <- Где AddData метод класса.

- Для каждого класса нужно создавать отдельный файл. Допускать создание нескольких классов в одном файле нельзя.

- Если в коде имеется группа однотипных обьектов, то для них создается родительский класс для их создания.
    - Пример родительского обьекта: Buttons/ParentButton.

- Если в коде обнаружена группа одинаковых инициализированных обьектов ее желательно обозначить комментариями с обеих сторон как группу для упрощенного чтения кода стилем PEP8.
    - Пример в Main (так же валидно для библиотек и модулей).

- Виджет на котором необходимо расположить контрол передается исключительно через конструктор.
    - Пример - любой обьект из ControlPanel в конструктор которого передается master.

- Для хранения value - типов таких как text или набор коэфицентов, положение обьектов, их высота и ширина и прочие подобные данных хранятся в контейнерах.
    - В качестве примера можеть посмотреть любой обьект из группы Containers.

- Каждый контрол должен храниться со своей группой в отдельном файле, если в контрол нужно добавить событие то его необходимо создавать в классе контрола а внешние данные передавать через параметры.
    - Группа Buttons - отличный пример.

- Проверки на валидность входных данных передаваемых в конструктор осуществлять так-же в конструкторе. Для проверки во всех проектах будет создан обьект в который будет делать дежурные
    проверки на валидность.
    - В этом примере мы работаем только с контролами, поэтому привести пример негде, к этому вернемся позже. 

- Коллекция может хранить в себе только один тип: 
    - Плохой пример: List{"text", 12, false, []}
    - Хороший пример: List{"text", "text", "text", "text"} или List{true, false, false, true} или List{12, 512, 42, 63}

***Замечания по работе которые не были внесены:***

-Значения расположения контролов (padx/pady) так-же должны храниться в контейнерах, аналогично тексту кнопок, цветам или шрифту.